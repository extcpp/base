#!/bin/bash

## setup vars
build=false
debug=false
examples=false
EXT_CI=${EXT_CI:-false}

while [[ -n "$1" ]]; do
    case $1 in
        --build)
            build=true
        ;;
        --debug)
            debug=true
        ;;
        --examples)
            examples=true
        ;;
        *)
        ;;
    esac
    shift
done

project_root="${project_root:-$(realpath . )}"
build_root="${build_root:-$(realpath ../libobi-build/current)}"

## skip coverage when not on branch master
if $EXT_CI && [[ $EXT_CI_BRANCH != master ]] ; then
    cd $build_root; ctest --output-on-failure
    exit $?
fi

## build with coverage information
if $build; then
    e=""
    if $examples; then
        e="-e"
    fi

    CXXFLAGS="--coverage -O0 " ./build -v -c -d -t $e || exit $?
fi

## collect coverage information
cd "$build_root"

echo "############## extract base coverage ##############"
lcov --capture --initial --directory "$build_root" \
     --output-file base_coverage.info || exit $?

echo "############## zero counters  ##############"
lcov --directory "$build_root" --zerocounters

echo "############## run tests ##############"
( cd $build_root; ctest ) || exit $?

if $examples; then
echo "############## run examples ##############"
    (
        cd $build_root/examples
        for ex in *example; do
            echo "----- $ex -----"
            ./$ex
        done
    )
fi

if $debug; then
    echo "############## gcdas ##############"
    find -L "$build_root" -iname "*.gcda" || exit $?
fi

echo "############## extract test coverage  ##############"
lcov --directory "$build_root" \
     --capture --output-file test_coverage.info || exit $?

echo "############## combine base and test coverage  ##############"
lcov --add-tracefile base_coverage.info --add-tracefile test_coverage.info \
     --output-file coverage.info || exit $?


if $debug; then
    echo "############## list info ##############"
    lcov --list coverage.info || exit $?
fi

echo "############## remove info ##############"
lcov --remove coverage.info \
     '/usr/*' \
     "$project_root"'/examples*' \
     "$project_root"'/tests*' \
     "$project_root"'/external_libs/*' \
     --output-file coverage.info \
     || exit $?

if $debug; then
    echo "############## list info ##############"
    lcov --list coverage.info || exit $?
fi

## upload coverage information
if $EXT_CI; then
    cd $project_root

    bash <(curl -s https://codecov.io/bash) -f $build_root/coverage.info || \
        echo "Codecov did not collect coverage reports"

    gem install coveralls-lcov
    coveralls-lcov $build_root/coverage.info
fi
