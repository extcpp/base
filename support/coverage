#!/bin/bash
set -x

## setup vars
build=false
debug=false
examples=false
EXT_CI=${EXT_CI:-false}

GCOV=gcov-8
GCOV_TOOL=gcov-tool-8
LCOV_CMD=(lcov '--gcov-tool' "$GCOV_TOOL")

if $EXT_CI; then
    wget http://mirrors.kernel.org/ubuntu/pool/universe/l/lcov/lcov_1.13-4_all.deb
    sudo dpkg -i lcov_1.13-4_all.deb
    lcov --version
fi

ferr() {
    echo "$@"
    exit 1
}

while [[ -n "$1" ]]; do
    case $1 in
        --build)
            build=true
        ;;
        --debug)
            debug=true
        ;;
        --examples)
            examples=true
        ;;
        *)
        ;;
    esac
    shift
done

project_root="${project_root:-$(realpath . )}"
echo "project_root: ${project_root}"
build_root="${build_root:-$(realpath ../libext-build/current)}"
(( $? == 0 )) || ferr "faild to set build_root"
[[ -L "$build_root" ]] || echo "invalid build root"
echo "build_root: ${build_root}"

## skip coverage when not on branch master
if $EXT_CI && [[ $EXT_CI_BRANCH != master ]] ; then
    cd $build_root; ctest --output-on-failure
    exit $?
fi

## build with coverage information
if $build; then
    e=""
    if $examples; then
        e="-e"
    fi

    CXXFLAGS="--coverage -O0 " ./build -v -c -d -bt $e || ferr "failed to build"
fi

## collect coverage information
cd "$build_root"

echo "############## extract base coverage ##############"
"${LCOV_CMD[@]}" --capture --directory "$build_root" --initial \
     --output-file base_coverage.info || ferr "failed to collect basebase  coverage"

echo "############## zero counters  ##############"
"${LCOV_CMD[@]}" --directory "$build_root" --zerocounters

echo "############## run tests ##############"
( cd $build_root; ctest ) || ferr "failed to run ctest"

if $examples; then
echo "############## run examples ##############"
    (
        cd $build_root/examples
        for ex in *example; do
            echo "----- $ex -----"
            ./$ex
        done
    )
fi

if $debug; then
    echo "############## gcdas ##############"
    find -L "$build_root" -iname "*.gcda" || ferr "failed to find .gcda files"
fi

echo "############## extract test coverage  ##############"
"${LCOV_CMD[@]}" --capture --directory "$build_root" \
                 --output-file test_coverage.info || ferr "failed to extract coverage"

echo "############## combine base and test coverage  ##############"
"${LCOV_CMD[@]}" --add-tracefile base_coverage.info --add-tracefile test_coverage.info \
                 --output-file coverage.info || ferr "failed to combine coverage"


if $debug; then
    echo "############## list info ##############"
    "${LCOV_CMD[@]}" --list coverage.info || ferr "failed to list coverage"
fi

echo "############## remove info ##############"
"${LCOV_CMD[@]}" --remove coverage.info \
                 '/usr/*' \
                 "$project_root"'/examples*' \
                 "$project_root"'/tests*' \
                 "$project_root"'/external_libs/*' \
                 --output-file coverage.info \
                 || exit $?

if $debug; then
    echo "############## list info ##############"
    "${LCOV_CMD[@]}" --list coverage.info || ferr "failed to list coverage"
fi

## upload coverage information
if $EXT_CI; then
    cd $project_root

    bash -x  <(curl -s https://codecov.io/bash) \
        -x $GCOV -f $build_root/coverage.info \
        || ferr "Codecov did not collect coverage reports"

    gem install coveralls-lcov || ferr "could not install coveralls-lcov gem"
    coveralls-lcov $build_root/coverage.info || ferr "coveralls-lcov failed"
fi
