# Copyright - 2019 - Jan Christoph Uhde <Jan@UhdeJC.com>

## general travis
# https://docs.travis-ci.com/user/environment-variables/
# https://docs.travis-ci.com/user/reference/linux
# https://docs.travis-ci.com/user/reference/windows
# https://docs.travis-ci.com/user/reference/osx

## packages
# https://docs.travis-ci.com/user/installing-dependencies#Installing-Packages-with-the-APT-Addon
# https://apt.llvm.org/

os: linux
dist: bionic
language: cpp
sudo: required

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "L8WVgBhDwuJJy5pGC/x/RWPZnCUhQDz6aO0seQGSPY0HYBnuVeEmGvvPF7KN/G5gsubZt7fwHbuwhiaL4CpezV35Tpg1uDQGrYmKALvGQTYdFLQo6zEcBVcBi6lH/hNVcJeJxrU18TQAZJ19sHO4nYLgtUBO2GMaUg+8VGVkX7kyVfJThJ8/RJjpfhtNmfkvIs73JKxLYUgVJz57iBZC7gatACffFmpaq+C1YKUIMWQzTtnZiNOQQZNS5LTPl7kdtDP3vPrV+NDQU0/6l+bDa/FwB+OVodarc4ykL+pxt76oHCbbRE2/BURstaWPCWkkALMVHvC51lXV3Zs8brIlwWjakNoLV5leklb/prtosj4tXMjpEOM1JXW3StGensk5Pq4o19GeoasIR3X4Xjw5hFur6XRjBlAX/an8S+Eno/Pf/s+PRohCDJ+xRvxmfsy3WDncPgCNESmmK3j3Besedi9ExYRgvKMIL3Zd2zlroQepkHrB63tG77A9SHNlpGljP5HVG8rLxjSAnTGQES+uJL0IotQOjmTA7JgkvfUf40J4zczPZfKjBlCTBVzs5Zd3FXlu1G7R4h3HjSERis6sy0pWDk8RcrkSFBIpMDeZFqAA7xDgLr7qOQKnio5kLqbmFLrd/VKMGkY27DjUpSIEbJ65ZgjHLfzFfoUunISzCZo="
    - ARCH=amd64
    - build_type=Release
    - tests=ON
    - examples=ON
    - coverage=false

matrix:
  include:
    - name: "default"
      env:
        - CXX=g++-8
        - CC=gcc-8
        - build_type=Release
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']

    - name: "asan"
      if: branch = master
      env:
        - CXX=g++-8
        - CC=gcc-8
        - CXXFLAGS=" -fsanitize=address -fsanitize=undefined -fno-sanitize=alignment -fno-omit-frame-pointer -fno-sanitize=vptr -pthread "

    - name: "coverage"
      if: branch =~ /master|coverage/
      env:
        - CXX=g++-7
        - CC=gcc-7
        - CXXFLAGS="-O0 --coverage"
        #build settings
        - build_type=Debug
        - examples=OFF
        - coverage=true
      addons:
        apt:
          #we need gcc7 for lcov to work
          packages: ['gcc-7', 'g++-7', 'gcc-8', 'g++-8', 'lcov']

    - name: "clang"
      if: branch = master
      env:
        - CXX=clang++-9
        - CC=clang-9
      addons:
        apt:
          sources:
            #- ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-8']
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
          packages: ['clang-9', 'clang++-9', 'clang-format-9', 'clang-tools-9']

    - name: "mac"
      os: osx
      osx_image: xcode11.2
      compiler: clang

    - name: "coverity scan"
      if: branch = coverity_scan
      env:
        - CXX=g++-7
        - CC=gcc-7
      addons:
        apt:
          #we need gcc7 for lcov to work
          packages: ['gcc-7', 'g++-7', 'lcov']

        coverity_scan:
          project:
            name: extcpp/libext
            version: 0.1
            description: libext
          notification_email: linux@obiwahn.org
          build_command_prepend: |
                                 export ${CXX}
                                 export ${CC}
                                 export ${CXXFLAGS}
                                 cov-configure --comptype gcc --compiler /usr/bin/gcc-7 -- -std=gnu++1z
                                 cmake -DCMAKE_BUILD_TYPE=Debug -DLIBEXT_TESTS=ON -DLIBEXT_EXAMPLES=ON .
          build_command: "cmake --build . --config Debug"
          branch_pattern: coverity_scan
      before_script:
        # fix for coverity scans
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
        - sudo curl -s -L https://entrust.com/root-certificates/entrust_l1k.cer -o /usr/local/share/ca-certificates/entrust_l1k.crt
        - sudo update-ca-certificates
      script:
        - echo 'no build required ... done'
        # debug covertiy scan
        #- cat cov-int/build-log.txt
        #- cat cov-int/scm_log.txt

before_install:
  # for some reason CXX and CC can not be set in env
  - export CXX=${CXX:-g++}
  - export CC=${CC:-gcc}
  - export CXXFLAGS=${CXXFLAGS:-""}
  # set defaults
  - if ${verbose:-false}; then export VERBOSE=1; fi
  - export ARCH=${ARCH:-amd64}
  - export EXT_CI=true
  - export EXT_CI_BRANCH=${TRAVIS_BRANCH}
  # calculate pojects paths
  - export PATH="$install_root/bin:$PATH"
  - export project_root="$(pwd)"
  - export build_base="${project_root}-build"
  - export build_root="${build_base}/$build_type"
  - export install_root="$HOME/usr"
  - export build_prefix='<>'
  # system info
  - $project_root/.build_scripts/system_info
  - $project_root/.build_scripts/var_info

install:
  - mkdir "$install_root"
  - mkdir -p "$build_root"
  - ln -s "$build_root" "$build_base/current"
  - sudo $project_root/support/travis/install-$ARCH-$TRAVIS_OS_NAME
  - $project_root/.build_scripts/install_cmake
  - $project_root/.build_scripts/install_3rd_party

before_script:

script:
  - $project_root/.build_scripts/var_info
  - |
    $project_root/.build_scripts/configure \
      -DCMAKE_BUILD_TYPE="$build_type" \
      -DLIBEXT_TESTS="$tests" \
      -DLIBEXT_EXAMPLES="$examples" \
      -DLIBEXT_TESTS_NO_TIME_CRITICAL=ON \
      $cmake_extra_flags
  - $project_root/.build_scripts/build
  - if [[ $coverage == "false" ]]; then $project_root/.build_scripts/test $tests; fi
  - if [[ $coverage == "true" ]]; then $project_root/support/coverage; fi
